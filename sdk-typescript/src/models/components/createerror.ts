/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type Path = string | number;

export type Issues = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export type CreateError = {
  issues: Array<Issues>;
  name: string;
};

/** @internal */
export const Path$inboundSchema: z.ZodType<Path, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.number()]);

/** @internal */
export type Path$Outbound = string | number;

/** @internal */
export const Path$outboundSchema: z.ZodType<Path$Outbound, z.ZodTypeDef, Path> =
  z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Path$ {
  /** @deprecated use `Path$inboundSchema` instead. */
  export const inboundSchema = Path$inboundSchema;
  /** @deprecated use `Path$outboundSchema` instead. */
  export const outboundSchema = Path$outboundSchema;
  /** @deprecated use `Path$Outbound` instead. */
  export type Outbound = Path$Outbound;
}

/** @internal */
export const Issues$inboundSchema: z.ZodType<Issues, z.ZodTypeDef, unknown> = z
  .object({
    code: z.string(),
    path: z.array(z.union([z.string(), z.number()])),
    message: z.string().optional(),
  });

/** @internal */
export type Issues$Outbound = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

/** @internal */
export const Issues$outboundSchema: z.ZodType<
  Issues$Outbound,
  z.ZodTypeDef,
  Issues
> = z.object({
  code: z.string(),
  path: z.array(z.union([z.string(), z.number()])),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Issues$ {
  /** @deprecated use `Issues$inboundSchema` instead. */
  export const inboundSchema = Issues$inboundSchema;
  /** @deprecated use `Issues$outboundSchema` instead. */
  export const outboundSchema = Issues$outboundSchema;
  /** @deprecated use `Issues$Outbound` instead. */
  export type Outbound = Issues$Outbound;
}

/** @internal */
export const CreateError$inboundSchema: z.ZodType<
  CreateError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => Issues$inboundSchema)),
  name: z.string(),
});

/** @internal */
export type CreateError$Outbound = {
  issues: Array<Issues$Outbound>;
  name: string;
};

/** @internal */
export const CreateError$outboundSchema: z.ZodType<
  CreateError$Outbound,
  z.ZodTypeDef,
  CreateError
> = z.object({
  issues: z.array(z.lazy(() => Issues$outboundSchema)),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateError$ {
  /** @deprecated use `CreateError$inboundSchema` instead. */
  export const inboundSchema = CreateError$inboundSchema;
  /** @deprecated use `CreateError$outboundSchema` instead. */
  export const outboundSchema = CreateError$outboundSchema;
  /** @deprecated use `CreateError$Outbound` instead. */
  export type Outbound = CreateError$Outbound;
}
